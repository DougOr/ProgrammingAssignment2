ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata","sulfate",1:10)
install.packages("plyr")
library(plyr)
pollutantmean <- function(directory, pollutant, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
# df is your list of data.frames
mean(df[, pollutant], na.rm = TRUE)
}
install.packages("plyr")
pollutantmean("specdata","sulfate",1:10)
library(plyr)
pollutantmean("specdata","sulfate",1:10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscrip1.R")
source("submitscript1.R")
submi()
submti()
submit()
install.packages("plyr")
1
info()
submit()
submit()
install.packages("plyr")
submit()
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
mean(df[, pollutant], na.rm = TRUE)
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
df
}
complete("specdata",1)
complete("specdata",2,4,8,10,12)
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
ldf
}
complete("specdata",2,4,8,10,12)
complete("specdata",1)
complete <- function(directory, id = 1:332) {
files <- as.character(list.files(path="[file path]"))
readLines(paste("[file path]",.Platform$file.sep,files[1],sep=""))
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
files <- as.character(list.files(path="specdata"))
readLines(paste("[file path]",.Platform$file.sep,files[1],sep=""))
}
complete("specdata",1)
list.dirs(R.home("specdata"))
list.dirs(R.home("specdata"), full.names = FALSE)
complete <- function(directory, id = 1:332) {
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
filename1
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
if(id>=1 && id<10) {
te1 <- paste("00",id,sep="")
#print(te1)
} else if(id>10 && id<=99) {
te1 <- paste("0",id,sep="")
#print(te1)
} else {
te1 <- id
#print(te1)
}
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
filename1
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
if(summarize) {
print(summary(test))
return (test)
} else {
return (test)
}
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
return (test)
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
print summary(test)
}
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
print summary(test))
}
complete <- function(directory, id = 1:332) {
te1 <- formatC(id, width=3, flag="0")
filename = paste(directory, te1, sep = "/")
filename1 = paste(filename, "csv", sep = ".")
test <- read.table(file = filename1, header=T, sep=",")
print (test)
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
}
complete("specdata",1)
ldf
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
print ldf
}
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
filenames
}
complete("specdata",1)
complete <- function(directory, id = 1:332) {
filenames <- sprintf("%03d.csv", id)
filenames <- paste(directory, filenames, sep="/")
ldf <- lapply(filenames, read.csv)
df=ldply(ldf)
}
complete("specdata",1)
df
filenames <- sprintf("%03d.csv", id)
id <- 1:332
filenames <- sprintf("%03d.csv", id)
filenames
filenames <- paste("specdata",filenames, sep="/")
filenames
filenames <- sprintf("%03d.csv", id)
filenames
ldf <- lapply(filenames, read.csv)
filenames <- paste("specdata",filenames, sep="/")
ldf <- lapply(filenames, read.csv)
ldf
df = ldply(ldf)
df
list.files
list.files("specdata")
files_list <- list.files("specdata", full.name=TRUE)
files_list
dat <- data.frame()
for (i in )
complete <- function(directory, id = 1:332) {
nobs <- function(id) {
path <- file.path(directory, paste(sprintf("%03d", as.numeric(id)), ".csv", sep=""))
return (sum(complete.cases(read.csv(path))))
}
return (data.frame(id=id, nobs=sapply(id, nobs)))
}
complete("specdata",1)
complete("specdata", c(2,4,8,10,12))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
submit()
install.packages("plyr")
submit()
submit()
install.packages("plyr")
submit()
corr <- function(directory, threshold = 0) {
files <- list.files( path = directory )
cr <- c()
for(f in 1:length(files)){
data <- read.csv( paste(directory, "/", files[f], sep="") )
data <- data[complete.cases(data),]
if ( nrow(data) > threshold ) {
cr <- c(cr, cor(data$sulfate, data$nitrate) ) # append corralations
}
}
return( cr )
}
cr <- corr("specdata",150)
head(cr)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
submit()
submit()
submit()
outcome <- read.csv("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
best <- function(state, outcome) {
#Invalid outcome input type
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop("invalid outcome")
}
#Get index for our given outcome string.
index <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
#Read and coerce our dataset while suppressing warnings and removing NA's.
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data[,index] <- suppressWarnings(as.numeric(data[,index]))
data <- na.omit(data)
#Invalid state input or no observations
states <- table(data$State)
if (!state %in% names(states)) {
stop("invalid state")
}
#Slice our data by the given state and sort it by outcome and hospital name.
slice <- subset(data, State==state)
slice <- slice[order(slice[,index], na.last=TRUE),2]
slice <- na.omit(slice)
#Get hospital name with the lowest 30-day mortality rate.
slice[1]
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()\
submit()
2
submit()
submit()
source("rankhospital.R")
rankhospital("MD","heart failure",5)
head(texas)
rankhospital("MD","heart failure",4)
rankhospital("TX","heart failure",4)
rankhospital("MD","heart attack","worst")
submit()
submit()
submit()
submit()
source("rankall.R")
head(rankall("heart attack",20),10)
submit()
submit()
rankall <- function(outcome, num="best") {
#Invalid outcome input type
if (!outcome %in% c("heart attack", "heart failure", "pneumonia")) {
stop("invalid outcome")
}
#Get index for our given outcome string.
index <- ifelse(outcome == "heart attack", 11, ifelse(outcome == "heart failure", 17, 23))
#Read and coerce our dataset while suppressing warnings and removing NA's.
data <- read.csv("outcome-of-care-measures.csv", colClasses="character")
data[,index] <- suppressWarnings(as.numeric(data[,index]))
data <- data[!is.na(data[,index]),]
#Sort our data by specified mortality rate and hospital name
data.sorted <- data[order(data[,index], data[,2], na.last=TRUE),]
data.sorted <- data.sorted[!is.na(data.sorted[,index]),]
#Parse out and validate our num
num <- ifelse(num == "best", 1, ifelse(num == "worst", length(data.sorted), as.numeric(num)))
#Remove duplicate state names
states <- sort(unique(data.sorted[,7]))
#Function returns the hospital name for the given state at the specified rank.
state_hospital_data <- function(state) {
slice <- subset(data.sorted, State==state)
slice <- slice[num, c(2,7,index)]
slice$State <- state
return (slice)
}
state_data <- lapply(states, state_hospital_data)
dframe <- as.data.frame(do.call(rbind, lapply(states, state_hospital_data)), row.names=states)
colnames(dframe) <- c("hospital", "state")
return (dframe)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
data <- read.csv(file="/.../data/outcome-of-care-measures.csv", colClasses = "character")
# "..." is the directory in your computer; masked here for privacy
reason <- c("heart attack", "heart failure", "pneumonia")
state_arr <- sort(unique(data$State))
arr_len <- length(state_arr)
hospital <- rep("", arr_len)
if(!outcome %in% reason){
stop("invalid outcome")
} else {
for(i in 1:arr_len){
goal <- data[data$State == state_arr[i], ] # loop for each state
if(outcome == "heart attack"){
attack <- as.numeric(goal[, 11])
len <- dim(goal[!is.na(attack),])[1]
if(num == "best"){
hospital[i] <- helper(goal, attack, 1)
} else if(num == "worst"){
hospital[i] <- helper(goal, attack, len)
} else if(num > len){
hospital[i] <- NA
} else{
hospital[i] <- helper(goal, attack, num)
}
}
else if(outcome == "heart failure" ){ # Attention here!
failure <- as.numeric(goal[, 17])
len <- dim(goal[!is.na(failure),])[1]
if(num == "best"){
hospital[i] <- helper(goal, failure, 1)
#hospital[i] <- best(state_arr[i], "heart failure")
} else if(num == "worst"){
hospital[i] <- helper(goal, failure, len)
} else if(num > len){
hospital[i] <- NA
} else{
hospital[i] <- helper(goal, failure, num)
}
}
else{
pneumonia <- as.numeric(goal[, 23])
len <- dim(goal[!is.na(pneumonia),])[1]
if(num == "best"){
#hospital[i] <- best(state_arr[i], "pneumonia")
hospital[i] <- helper(goal, pneumonia, 1)
} else if(num == "worst"){
hospital[i] <- helper(goal, pneumonia, len)
} else if(num > len){
hospital[i] <- NA
} else{
hospital[i] <- helper(goal, pneumonia, num)
}
}
} # end of the for loop
df <- data.frame(hospital = hospital, state = state_arr)
df
}
}
head(rankall("heart attack",10),10)
source("rankall.R")
head(rankall("heart attack",10),10)
tail(rankall("pneumonia","worst"),3)
tail(rankall("heart failure"),10)
source("rankall2.R")
tail(rankall("heart failure"),10)
tail(rankall("heart failure"),10)
tail(rankall("pneumonia","worst"),3)
head(rankall("heart attack",10),10)
source("rankall2.R")
head(rankall("heart attack",10),10)
head(rankall("heart attack",10),10)
tail(rankall("pneumonia","worst"),3)
source("rankall2.R")
tail(rankall("pneumonia","worst"),3)
source("rankall2.R")
tail(rankall("pneumonia","worst"),3)
setwd("~/")
source("cachematrix.r
")
source("cachematrix.r")
ls
dir
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.r")
makeCacheMatrix(1,2,3)
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2);
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2)
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getMatrix()
a$getMatrix();
cacheSolve(a)
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2)
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getMatrix()
a$getatrix()
a$matrix()
a$getmatrix()
cacheSolve(a)
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getMatrix()
a$getmatrix()
cacheSolve(a)
a
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a$getmatrix()
cacheSolve(a)
source("cachematrix - Copy.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix()
a$getmatrix()
a$getmatrix();
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix();
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix();
cacheSolve(a)
source("cachematrix.r")
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix();
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix();
cacheSolve(a)
source("cachematrix - Copy(2).r")
source("cachematrix - Copy (2).r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
summary(a)
a$getmatrix();
a$getMatrix();
cacheSolve(a)
cacheSolve(a)
source("cachematrix.r")
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a$getMatrix();
a$getMatrix();
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a$getMatrix();
a$getMatrix()
a$getMatrix()
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a$getMatrix();
cacheSolve(a)
cacheSolve(a)
source("cachematrix.r")
a <- makeCacheMatrix(matrix(c(1,2,12,13),nrow=2,ncol=2))
a$getMatrix();
summary(a)
a$getMatrix();
cacheSolve(a)
cacheSolve(a)
